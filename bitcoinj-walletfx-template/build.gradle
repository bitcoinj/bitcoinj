plugins {
    id 'java'
    id 'maven-publish'
    id 'eclipse'
    id 'application'
    id 'org.javamodularity.moduleplugin'    version "1.8.10"
    id 'org.openjfx.javafxplugin'           version '0.0.10'
    id 'org.beryx.jlink'                    version '2.24.2'
}

repositories {
    maven { url 'https://gitlab.com/api/v4/projects/26584840/packages/maven' }  // SupernautFX
}

dependencies {
    implementation(project(':bitcoinj-walletfx')) {
        exclude group: 'org.openjfx'
    }
    implementation project(':bitcoinj-core')

    implementation('app.supernaut:app.supernaut.fx:0.2.0') {
        exclude group: 'org.openjfx'
    }
    implementation('app.supernaut:app.supernaut.fx.micronaut:0.2.0') {
        exclude group: 'org.openjfx'
    }
    implementation "io.micronaut:micronaut-inject-java:2.5.13"

    implementation 'com.google.guava:guava:27.1-android'
    implementation 'de.jensd:fontawesomefx:8.0.0'
    implementation 'com.google.zxing:core:3.4.0'

    implementation 'org.slf4j:slf4j-api:2.0.0-alpha5'
    runtimeOnly 'org.slf4j:slf4j-jdk14:2.0.0-alpha5'

    implementation "javax.inject:javax.inject:1"

    annotationProcessor "io.micronaut:micronaut-inject-java:1.2.0"
}

version = '0.16-SNAPSHOT'

javafx {
    version = '17.0.0.1'
    modules = [ 'javafx.controls', 'javafx.graphics', 'javafx.fxml' ]
}

patchModules.config = [
        "java.annotation=jsr305-3.0.2.jar"
]

sourceCompatibility = 11
compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'

application {
    mainModule = 'wallettemplate'
    mainClass  = 'wallettemplate.WalletTemplateApp'
}

def appName = 'WalletTemplate'

ext.os = org.gradle.internal.os.OperatingSystem.current()

jlink {
    addExtraDependencies("javafx")
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages', '--add-modules', 'app.supernaut.fx.micronaut,org.slf4j.jul']
    launcher {
        name = appName
        jvmArgs = []
    }
    mergedModule {
        additive = true

        requires 'org.slf4j'
    }
    jpackage {
        // See https://badass-jlink-plugin.beryx.org/releases/latest/#_jpackage for
        // where the plugin's jpackage task finds the path to the jpackage tool by default
        // (Currently you need to manually install a OpenJDK 14 Early Access Build including jpackage)
        skipInstaller = false

        // Massage version string to be compatible with jpackage installers
        // for the current OS platform
        def appVersionForJpackage = normalizeAppVersion(version)

        imageOptions = ["--verbose", "--app-version", appVersionForJpackage]
        installerOptions = ["--app-version", appVersionForJpackage]

        if (os.macOsX) {
            //imageOptions += [ '--resource-dir', "${projectDir}/src/macos/resource-dir" ]
            imageOptions += [ '--mac-package-identifier', 'app.omnimarketcap' ]
        } else if (os.windows) {
            installerOptions += ['--win-dir-chooser', '--win-menu', '--win-shortcut']
        }

    }
}

/**
 * Massage the version string based upon the current OS to be valid
 * for the installer platforms for that OS. rpmbuild, MSI, and potentially
 * others have restrictions on valid version strings.
 *
 * @param appVersion A typical Gradle version string
 * @return a version string that should work for the current platform
 */
String normalizeAppVersion(final String appVersion) {
    if (os.linux) {
        // Replace '-' with '.' for rpmbuild
        return appVersion.replace('-', '.')
    } else if (os.windows) {
        // This is a hack attempt to assure the version conforms to MSI productVersion string rules
        // See https://docs.microsoft.com/en-us/windows/win32/msi/productversion
        // For now, we'll just remove '-SNAPSHOT' if present.
        return appVersion.replaceAll('-SNAPSHOT$', '')
    } else {
        return "1.0"
    }
}
